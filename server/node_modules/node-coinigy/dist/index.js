'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Coinigy = function () {
  function Coinigy(apiKey, apiSecret) {
    _classCallCheck(this, Coinigy);

    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.url = 'https://api.coinigy.com/api/v1';
    this.endpoints = {
      //Account Data
      userInfo: '/userInfo',
      activity: '/activity',
      accounts: '/accounts',
      balances: '/balances',
      balanceHistory: '/balanceHistory',
      orders: '/orders',
      alerts: '/alerts',
      userWatchList: '/userWatchList',
      newsFeed: '/newsFeed',
      //Account Functions
      updateUser: '/updateUser',
      savePrefs: '/savePrefs',
      updateTickers: '/updateTickers',
      orderTypes: '/orderTypes',
      refreshBalance: '/refreshBalance',
      addAlert: '/addAlert',
      deleteAlert: '/deleteAlert',
      addApiKey: '/addApiKey',
      deleteApiKey: '/deleteApiKey',
      activateApiKey: '/activateApiKey',
      activateTradingKey: '/activateTradingKey',
      addOrder: '/addOrder',
      cancelOrder: '/cancelOrder',
      refreshOrders: '/refreshOrders',
      //Market Data
      exchanges: '/exchanges',
      markets: '/markets',
      data: '/data',
      ticker: '/ticker'
    };
    this.errors = {
      '1055': 'INVALID API KEY',
      '1056': 'RETURN DATA NOT PROPERLY FORMATTED',
      '1057': 'POSTED PARAMETERS WERE EITHER MISSING OR NOT PROPERLY FORMATTED',
      '1061': 'TRY/CATCH EXCEPTION',
      '1062': 'NO API METHOD PROVIDED'
    };
  }

  _createClass(Coinigy, [{
    key: '_postEncoded',
    value: function _postEncoded(api, params) {
      return _axios2.default.post(this.endpoints[api], _querystring2.default.stringify(params), {
        baseURL: this.url,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-API-KEY': this.apiKey,
          'X-API-SECRET': this.apiSecret
        }
      }).then(function (res) {
        if (!res.data.hasOwnProperty('data')) throw res.data;
        return res.data;
      });
    }
  }, {
    key: '_post',
    value: function _post(api, params) {
      return _axios2.default.post(this.endpoints[api], params, {
        baseURL: this.url,
        headers: {
          'Content-Type': 'application/json',
          'X-API-KEY': this.apiKey,
          'X-API-SECRET': this.apiSecret
        }
      }).then(function (res) {
        if (!res.data.hasOwnProperty('data')) throw res.data;
        return res.data;
      });
    }
  }, {
    key: 'userInfo',
    value: function userInfo() {
      return this._post('userInfo');
    }
  }, {
    key: 'activity',
    value: function activity() {
      return this._post('activity');
    }
  }, {
    key: 'accounts',
    value: function accounts() {
      return this._post('accounts');
    }

    //0 or 1: return empty balances, string: comma-separated or underscore-separated list

  }, {
    key: 'balances',
    value: function balances(p) {
      return this._post('balances', p);
    }

    //Datetime: "2016-07-01" format

  }, {
    key: 'balanceHistory',
    value: function balanceHistory(p) {
      return this._post('balanceHistory', p);
    }
  }, {
    key: 'orders',
    value: function orders() {
      return this._post('orders');
    }
  }, {
    key: 'alerts',
    value: function alerts() {
      return this._post('alerts');
    }
  }, {
    key: 'userWatchList',
    value: function userWatchList() {
      return this._post('userWatchList');
    }
  }, {
    key: 'newsFeed',
    value: function newsFeed() {
      return this._postEncoded('newsFeed');
    }
  }, {
    key: 'updateUser',
    value: function updateUser(p) {
      return this._post('updateUser', p);
    }
  }, {
    key: 'savePrefs',
    value: function savePrefs(p) {
      return this._post('savePrefs', p);
    }
  }, {
    key: 'updateTickers',
    value: function updateTickers(p) {
      return this._post('updateTickers', p);
    }
  }, {
    key: 'orderTypes',
    value: function orderTypes() {
      return this._post('orderTypes');
    }
  }, {
    key: 'refreshBalance',
    value: function refreshBalance(p) {
      return this._post('refreshBalance', p);
    }
  }, {
    key: 'addAlert',
    value: function addAlert(p) {
      return this._post('addAlert', p);
    }
  }, {
    key: 'deleteAlert',
    value: function deleteAlert(p) {
      return this._post('deleteAlert', p);
    }
  }, {
    key: 'addApiKey',
    value: function addApiKey() {
      return this._post('addApiKey', p);
    }
  }, {
    key: 'deleteApiKey',
    value: function deleteApiKey(p) {
      return this._post('deleteApiKey', p);
    }
  }, {
    key: 'activateApiKey',
    value: function activateApiKey(p) {
      return this._post('activateApiKey', p);
    }
  }, {
    key: 'activateTradingKey',
    value: function activateTradingKey(p) {
      return this._post('activateTradingKey', p);
    }
  }, {
    key: 'addOrder',
    value: function addOrder(p) {
      return this._postEncoded('addOrder', p);
    }
  }, {
    key: 'cancelOrder',
    value: function cancelOrder(p) {
      return this._postEncoded('cancelOrder', p);
    }
  }, {
    key: 'refreshOrders',
    value: function refreshOrders(p) {
      return this._post('refreshOrders', p);
    }
  }, {
    key: 'exchanges',
    value: function exchanges() {
      return this._post('exchanges');
    }
  }, {
    key: 'markets',
    value: function markets(p) {
      return this._post('markets', p);
    }

    //types = 'history, asks, bids, orders, all'

  }, {
    key: 'data',
    value: function data(p) {
      return this._post('data', p);
    }
  }, {
    key: 'ticker',
    value: function ticker(p) {
      return this._post('ticker', p);
    }
  }]);

  return Coinigy;
}();

module.exports = Coinigy;